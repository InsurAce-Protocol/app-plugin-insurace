static const uint32_t INSURACE_C_COVER_M_BUY_COVER_V3 = 0xaaef41b9; // Txn on https://etherscan.io/tx/0x651e1be4a0f5ebc6efdc24bcb8a869d4f8c737ed67bd81c26939160bf2caa48a
static const uint32_t INSURACE_C_COVER_M_CANCEL_COVER = 0xb77b9409; // Txn on https://etherscan.io/tx/0x9d9ea4c89daa7c93b69a07674bd6ac44e95ee6975b224339f36c17a04e5e7fbb

IA contracts - https://docs.insurace.io/landing-page/developer-reference/contract-addresses

contract Cover - https://etherscan.io/address/0x88Ef6F235a4790292068646e79Ee563339c796a0#code

buyCoverV3 - https://etherscan.io/tx/0x651e1be4a0f5ebc6efdc24bcb8a869d4f8c737ed67bd81c26939160bf2caa48a

function: buyCoverV3(uint16[] products,             // products[0]
                    uint16[] durationInDays,        // durationInDays[0]
                    uint256[] amounts,              // amounts[0]
                    address[] addresses,            // addresses[0] -> owner (the cover owner address)
                                                    // addresses[1] -> currency (the cover amount currency)
                                                    // addresses[2] -> premiumCurrency (the cover premium currency)
                    uint256 premiumAmount,          // premiumAmount
                    uint256 referralCode,           // referralCode
                    uint256[] helperParameters, 
                    uint256[] securityParameters, 
                    string freeText, 
                    uint8[] v, 
                    bytes32[] r, 
                    bytes32[] s)

| Buy Cover  | Product | Duration | Amounts | Owner | Premium |
| InsurAce   | xx      | Days xx  | ETH xxx | 0x... | DAI xxx |

| InsurAce  | Amounts | Premium | Owner |
| Buy Cover | ETH xxx | DAI xxx | 0x... |

| InsurAce  | Buy       | Approval | Reject |
| Cover     | Cover     |          |        |

| InsurAce  | Cancel    | Approval | Reject |
| Cover     | Cover     |          |        |


MethodID: 0xaaef41b9
[0]:  0000000000000000000000000000000000000000000000000000000000000180
[1]:  00000000000000000000000000000000000000000000000000000000000001c0
[2]:  0000000000000000000000000000000000000000000000000000000000000200
[3]:  0000000000000000000000000000000000000000000000000000000000000240
[4]:  00000000000000000000000000000000000000000000000000000000087044e8
[5]:  0000000000000000000000005f799f365fa8a2b60ac0429c48b153ca5a6f0cf8
[6]:  00000000000000000000000000000000000000000000000000000000000002c0
[7]:  0000000000000000000000000000000000000000000000000000000000000360
[8]:  00000000000000000000000000000000000000000000000000000000000003c0
[9]:  0000000000000000000000000000000000000000000000000000000000000440
[10]: 0000000000000000000000000000000000000000000000000000000000000480
[11]: 00000000000000000000000000000000000000000000000000000000000004c0
[12]: 0000000000000000000000000000000000000000000000000000000000000001
[13]: 000000000000000000000000000000000000000000000000000000000000007c
[14]: 0000000000000000000000000000000000000000000000000000000000000001
[15]: 000000000000000000000000000000000000000000000000000000000000001e
[16]: 0000000000000000000000000000000000000000000000000000000000000001
[17]: 00000000000000000000000000000000000000000000000000000004a817c800
[18]: 0000000000000000000000000000000000000000000000000000000000000003
[19]: 0000000000000000000000009c05e87d3448ef3223d282c8f14523ba2362af56
[20]: 000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7
[21]: 000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7
[22]: 0000000000000000000000000000000000000000000000000000000000000004
[23]: 00000000000000000000000000000000000000000000000000000004a817c800
[24]: 0000000000000000000000000000000000000000000000000000d8a44262b000
[25]: 00000000000000000000000000000000000000000000000000000000000001f4
[26]: 00000000000000000000000000000000000000000000000000000000000003e8
[27]: 0000000000000000000000000000000000000000000000000000000000000002
[28]: 0000000000000000000000000000000000000000000000000000000000eceb08
[29]: 000000000000000000000000000000000000000000000000000000006320688d
[30]: 0000000000000000000000000000000000000000000000000000000000000058
[31]: 7b2270726f64756374496473223a5b22313234225d2c22636f76657265644164
[32]: 64726573736573223a5b22307839633035653837643334343865663332323364
[33]: 323832633866313435323362613233363261663536225d7d0000000000000000
[34]: 0000000000000000000000000000000000000000000000000000000000000001
[35]: 000000000000000000000000000000000000000000000000000000000000001c
[36]: 0000000000000000000000000000000000000000000000000000000000000001
[37]: 2e9ab1cf2bef3be8091e6fd9492aaf3616801b2b03724895c46782946a97b866
[38]: 0000000000000000000000000000000000000000000000000000000000000001
[39]: 38241a5b844677d1ccb157d81d8bc2ea6056176110b9cabc7c7033528418bc93


function _buyCover(
        uint16[] memory products,
        uint16[] memory durationInDays,
        uint256[] memory amounts,
        address[] memory addresses,
        uint256 premiumAmount,
        uint256 referralCode,
        uint256[] memory helperParameters,
        uint256[] memory securityParameters,
        string memory freeText
    ) internal {
        // check the number of cover details
        require(products.length == durationInDays.length, "BC: 1");
        require(products.length == amounts.length, "BC: 2");

        // check the address list
        // addresses[0] -> owner (the cover owner address)
        // addresses[1] -> currency (the cover amount currency)
        // addresses[2] -> premiumCurrency (the cover premium currency)
        require(ICoverConfig(cfg).isValidCurrency(addresses[1]) && ICoverConfig(cfg).isValidCurrency(addresses[2]), "BC: 3");

        // check the beneficiary address list (its length is 2)
        require(addresses[0] != address(0), "BC: 4");
        require(address(uint160(referralCode)) != address(0), "BC: 5");

        // check the helper parameters (its length is 4)
        // helperParameters[0] -> totalAmounts (the sum of cover amounts)
        // helperParameters[1] -> totalWeight (the sum of cover amount * cover duration * cover unit cost)
        // helperParameters[2] -> coverOwnerRewardPctg (the cover owner reward perentageX10000 of premium, 0 if not set)
        // helperParameters[3] -> referralRewardPctg (the referral reward perentageX10000 of premium, 0 if not set)
        require(helperParameters.length == 4, "BC: 6");

        // check the security parameters (its length is 2)
        // securityParameters[0] -> blockNumber (the block number when the signature is generated off-chain)
        // securityParameters[1] -> nonce (the nonce of the cover owner, can be timestamp in seconds)
        require(securityParameters.length == 2, "BC: 7");

        // check the block number latency
        require((block.number >= securityParameters[0]) && (block.number - securityParameters[0] <= buyCoverMaxBlkNumLatency), "BC: 8");

        // check the cover owner nonce flag
        require(!buyCoverNonceFlagMap[addresses[0]][securityParameters[1]], "BC: 9");
        buyCoverNonceFlagMap[addresses[0]][securityParameters[1]] = true;

        // check and receive the premium from this transaction
        _receivePremium(_msgSender(), addresses[2], premiumAmount);

        // process the cover creation and reward distribution
        ICoverPurchase(coverPurchase).buyCover(products, durationInDays, amounts, addresses, premiumAmount, referralCode, helperParameters, freeText);
    }

// IA cancel cover
Txn - https://etherscan.io/tx/0x9d9ea4c89daa7c93b69a07674bd6ac44e95ee6975b224339f36c17a04e5e7fbb

Function: cancelCover(uint256 coverId)

MethodID: 0xb77b9409
[0]:  0000000000000000000000000000000000000000000000000000000000000003

// UniSwap

Methods in a smart contract have parameters (or arguments). For example, swapExactEthforTokens has this format:

swapExactETHForTokens(uint256 amountOutMin,
                        address[] path,
                        address to,
                        uint256 deadline)

So, the parameters for this function are:

uint256 amountOutMin: is the minimum amount in tokens the user will get from their swap.
address[] path: is an array of paths. If we look at the contract source code on Etherscan, the only paths used are path[0] and path[1], where path[0] is the OUTGOING token, and path[1] the INCOMING one.
address to: is the address to which the tokens are sent back.
uint256 deadline: is the swap deadline after which it will fail.



++INSURACE++


StakingV2Controller - 0x7D8C3F38C8545a770D57c8043d54e5715B1C584E
Source Code: https://etherscan.io/address/0x84f24b1E730d04962F44a14FFD2aCcd3F7C5f885#code

txn - 0x60132f221121a16beb6757426a2ebe9697658154bfc3eb5bdf49612cb6c91976
Function: stakeTokens(uint256 _amount, address _token)
MethodID: 0x0bea440d
[0]:  000000000000000000000000000000000000000000000213a4b5f259bc302000
[1]:  000000000000000000000000544c42fbb96b39b21df61cf322b5edc285ee7429

txn - 0xff04f02dfdf18710986df748c6b7922cfc3b1f48e671cd6f1a63e5769fd58f01
Function: proposeUnstake(uint256 _amount, address _token)
MethodID: 0x5ace4df7
[0]:  00000000000000000000000000000000000000000000002ff4002c5b3e2b17ff
[1]:  000000000000000000000000544c42fbb96b39b21df61cf322b5edc285ee7429

txn - 0xe5d67f8acaf43eb28aa6cda8b07b291ce21c6a71837a5cf75948a510a7cd579a
Function: withdrawTokens(address _caller, address _staker, uint256 _amount, address _token, uint256 _nonce, uint256 _deadline, uint8[] v, bytes32[] r, bytes32[] s)
MethodID: 0x31e6cbb4
[0]:  000000000000000000000000e55dfd364f2eb7523e932ec0a4a9e58d0d7f9de8
[1]:  000000000000000000000000e55dfd364f2eb7523e932ec0a4a9e58d0d7f9de8
[2]:  0000000000000000000000000000000000000000000000041006ae1c35e58d9b
[3]:  000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
[4]:  0000000000000000000000000000000000000000000000000000000000f39018
[5]:  0000000000000000000000000000000000000000000000000000000000f39018
[6]:  0000000000000000000000000000000000000000000000000000000000000120
[7]:  0000000000000000000000000000000000000000000000000000000000000160
[8]:  00000000000000000000000000000000000000000000000000000000000001a0
[9]:  0000000000000000000000000000000000000000000000000000000000000001
[10]: 000000000000000000000000000000000000000000000000000000000000001c
[11]: 0000000000000000000000000000000000000000000000000000000000000001
[12]: 60d691316e6e5ee46f1c7df30a35fd29e7c21a162680a61d3e4866bc553b7512
[13]: 0000000000000000000000000000000000000000000000000000000000000001
[14]: 5c7306c975e6420553bb7a573838d966614084057f32c7c65f1cad9a03678169


RewardController - 0x9933b0419CfB71791dA75aC2DceA952D0875c967
txn - 0x9a65941106bfc25c3521fa36483b3803579c81b1dd6dbaea624ea7bb5e721813
Function: unlockReward(address[] _tokenList, bool _bBuyCoverUnlockedAmt, bool _bClaimUnlockedAmt, bool _bReferralUnlockedAmt) ***
MethodID: 0x6a69d93f
[0]:  0000000000000000000000000000000000000000000000000000000000000080
[1]:  0000000000000000000000000000000000000000000000000000000000000000
[2]:  0000000000000000000000000000000000000000000000000000000000000000
[3]:  0000000000000000000000000000000000000000000000000000000000000000
[4]:  0000000000000000000000000000000000000000000000000000000000000001
[5]:  000000000000000000000000544c42fbb96b39b21df61cf322b5edc285ee7429

txn - 0xbe5ef4de24df01b5a231244bd3ac45522d7531b43ffad3dffb0c2a8508a06573
Function: withdrawReward(uint256 _gameId) ***
MethodID: 0x523a3f08
[0]:  000000000000000000000000000000000000000000000004974da211c593d94e


0x0758e1df