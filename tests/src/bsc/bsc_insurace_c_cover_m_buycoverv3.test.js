import "core-js/stable";
import "regenerator-runtime/runtime";
import { waitForAppScreen, zemu, genericTx, nano_models,SPECULOS_ADDRESS, txFromEtherscan} from '../test.fixture';
import { ethers } from "ethers";
import { parseEther, parseUnits} from "ethers/lib/utils";

// EDIT THIS: Replace with your contract address
const contractAddr = "0xfba24bdbb36001f1f88b3a552c77ec1c10f5e4c0"; 
// EDIT THIS: Replace `boilerplate` with your plugin name
const pluginName = "insurace";
const testNetwork = "bsc";
const abi_path = `../../networks/${testNetwork}/${pluginName}/abis/` + contractAddr + '.json';
const abi = require(abi_path);

// Test from constructed transaction
// EDIT THIS: build your own test
nano_models.forEach(function(model) {
  test('[Nano ' + model.letter + '] InsurAce Cover / Buy Cover V3', zemu(model, async (sim, eth) => {
  const contract = new ethers.Contract(contractAddr, abi);

  // Get input data from https://bscscan.com/tx/0xce97bd015c2fc06dabd1eff122abb15f33fe12fc4438fc0f9150a107ffe7c333
  const inputData = "0xaaef41b9000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000038dd4f97f240ac00000000000000000000000000092ba2d18066700cca07f5075239396c325e1888200000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000250000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000023ea08cfecb04a00000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000092ba2d18066700cca07f5075239396c325e188820000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000023ea08cfecb04a000000000000000000000000000000000000000000000005eb2153c3d14d31e00000000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000016b60f0000000000000000000000000000000000000000000000000000000006395e07c000000000000000000000000000000000000000000000000000000000000006e7b2270726f64756374496473223a5b223337225d2c22636f7665726564416464726573736573223a5b22307839324241324431383036363730304363413037463530373532333933393663333235653138383832225d2c22636f76657265644163636f756e7473223a5b22225d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000019500aefbd749463d242997ca273e389834e73857d3088a11a5d18a67ef42048400000000000000000000000000000000000000000000000000000000000000014a2006764c2a1b6f444294dc490cf98f3629b83d3d268f2f880e9dbbbe3beb04"

  // Get the generic transaction template
  let unsignedTx = genericTx;
  // Modify `to` to make it interact with the contract
  unsignedTx.to = contractAddr;
  // Modify the attached data
  unsignedTx.data = inputData;
  // EDIT THIS: get rid of this if you don't wish to modify the `value` field.
  // Modify the number of ETH sent
  unsignedTx.value = parseEther("0.1");

  // Create serializedTx and remove the "0x" prefix
  const serializedTx = ethers.utils.serializeTransaction(unsignedTx).slice(2);

  const tx = eth.signTransaction(
    "44'/60'/0'/0/0",
    serializedTx
  );

  const right_clicks = model.letter === 'S' ? 5 : 5;

  // Wait for the application to actually load and parse the transaction
  await waitForAppScreen(sim);
  // Navigate the display by pressing the right button 10 times, then pressing both buttons to accept the transaction.
  // EDIT THIS: modify `10` to fix the number of screens you are expecting to navigate through.
  await sim.navigateAndCompareSnapshots('.', model.name + '_bsc_insurace_c_cover_m_buycoverv3', [right_clicks, 0]);

  await tx;
  },testNetwork));
});

